name: CI

on: 
  #push:
  workflow_dispatch:
  workflow_call:
  pull_request_review:
    types: [submitted]

  
permissions: write-all

jobs:
  #Sanity:
    #uses: speedb-io/speedb/.github/workflows/sanity_check.yml@main
  
  Build:
    #needs: [Sanity]
    if: ${{ github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release') }}
    runs-on: [self-hosted, ubuntu, asrunner]
    strategy:
      matrix:
        include:
          - name: verify build
            command: cmake ..  -GNinja
          - name: optimized build
            command: cmake .. -DCMAKE_BUILD_TYPE=Release  -GNinja
          - mame: clang build
            command: CC=clang CXX=clang++ cmake ..  -GNinja
    container:
      image: alpine:3.14

    steps:
    - name: Pre-build
      run: |
        env
        rm -rf /usr/share/dotnet || echo ""
        df -h
        apk add git
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        apk add bash python3 py3-pip clang clang-extra-tools shellcheck gcc g++ cmake ninja ccache \
        openjdk10 gflags-dev snappy-dev lz4-dev bzip2-dev zstd-dev zlib-dev linux-headers openssh-client tar
        python3 -m pip install lint-diffs flake8
        
        
    - name: Checkout
      uses: actions/checkout@v3 
      
      
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
        
        
    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{runner.os}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: |
          ${{runner.os}}-ccache-
        
      
    - name: ${{ matrix.name }}
      run: |
        if [ -d "$GITHUB_WORKSPACE/build" ]; then
          echo >&2 "error: the build directory should not exist" && false NIK 
        fi
        if [ -d "~/.ccache" ]; then
          echo "Already exists"
        else
          mkdir -p ~/.ccache
          ls ~ | grep cache || echo ""
          touch ~/.ccache/ccache.txt
          echo "aaa" > ~/.ccache/ccache.txt
          ls ~/.ccache
          cat ~/.ccache/ccache.txt
        fi
        mkdir -p "$GITHUB_WORKSPACE/build"
        cd "$GITHUB_WORKSPACE/build"
        export "CCACHE_BASEDIR=$HOME"
        export "CCACHE_DIR=$HOME/.ccache"
        export "CCACHE_COMPILERCHECK=content"
        ${{ matrix.command }} -DPORTABLE=1 -DWITH_GFLAGS=1 \
        -DWITH_ZLIB=1 -DWITH_SNAPPY=1 -DWITH_BZ2=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 \
        -DWITH_JNI=1 -DJAVA_HOME=/usr/lib/jvm/default-jvm \
        -DWITH_BENCHMARK_TOOLS=1 -DWITH_CORE_TOOLS=1 -DWITH_TOOLS=1 \
        -DWITH_TESTS=1 -DWITH_ALL_TESTS=1 -DWITH_EXAMPLES=1
        ninja
        
  #Performance:
    #if: ${{ github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release') }}
    #needs: [Build]
    #uses: speedb-io/speedb/.github/workflows/perf-test.yml@main
  
  QA-Tests:
    if: ${{ github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release') }}
    needs: [Build]
    uses: speedb-io/speedb/.github/workflows/qa-tests.yml@main
  
  Fuzz:
    if: ${{ github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release') }}
    needs: [Build]
    runs-on: [self-hosted, ubuntu, asrunner]
    container:
      image: ubuntu:18.04
    strategy:
      matrix:
        include:
          - name: db_fuzzer
          - name: db_map_fuzzer

    steps:
      - name: Pre-build
        run: |
          apt update && apt install -y sudo python3 git clang-tools cmake make automake ucommon-utils libtool gettext pkg-config build-essential clang-10 zlib1g-dev libbz2-dev ninja-build liblzma-dev autoconf libsnappy-dev libzstd-dev liblz4-dev binutils m4 g++-10 unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          echo "nameserver 8.8.8.8" > /etc/resolv.conf
      
      - uses: actions/checkout@v3

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: ${{ matrix.name }}
        run: |
           echo 'git clone https://github.com/google/libprotobuf-mutator.git \n
             cd libprotobuf-mutator \n
             git checkout ffd86a32874e5c08a143019aad1aaf0907294c9f \n
             cd .. \n
             export CC=clang && export CXX=clang++ && mkdir LPM && cd LPM \n
             ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so \n
             ln -s /usr/bin/clang-10 /usr/bin/clang \n
             ln -s /usr/bin/clang++-10 /usr/bin/clang++ \n
             cmake ../libprotobuf-mutator -GNinja -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON -DLIB_PROTO_MUTATOR_TESTING=OFF -DCMAKE_BUILD_TYPE=Release \n
             ninja \n
             ninja install \n
             export PKG_CONFIG_PATH=$PWD:$PWD/external.protobuf/lib/pkgconfig/ \n
             export PATH=$PWD/external.protobuf/bin:$PATH \n
             cd $GITHUB_WORKSPACE \n
             COMPILE_WITH_ASAN=1 PORTABLE=1 make -j2 static_lib \n
             cd $GITHUB_WORKSPACE/fuzz \n
             make ${{ matrix.name }} \n
             ls -alFh $GITHUB_WORKSPACE/fuzz/ \n
             echo ASAN_OPTIONS=detect_leaks=0 ./db_fuzzer \n' > prepfuz.sh
           chmod +x prepfuz.sh
           bash -xv prepfuz.sh
           mkdir -p $GITHUB_WORKSPACE/out/
           ASAN_OPTIONS=detect_odr_violation=0 $GITHUB_WORKSPACE/fuzz/${{ matrix.name }} 2>&1 | sudo tee $GITHUB_WORKSPACE/out/${{ matrix.name }}.log
           tail -20 $GITHUB_WORKSPACE/out/${{ matrix.name }}.log | grep "==AddressSanitizer. Thread limit (4194304 threads) exceeded\. Dying\." || echo "${{ matrix.name }} failed!"
           
      - name: Copy ${{ matrix.name }} logs to S3
        run: |
          aws s3 cp $GITHUB_WORKSPACE/out/${{ matrix.name }}.log s3://spdb-github-ci/
    
  fuzzer_sum:
    runs-on: [self-hosted, ubuntu, asrunner]
    container:
      image: ubuntu:18.04
    needs: [ Fuzz ]
      
    steps:
      - uses: actions/checkout@v3
      
      - name: pre
        run: |
          apt update && apt install -y sudo unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: download db_fuzzer.log from s3
        run: |
          mkdir -p $GITHUB_WORKSPACE/out
          aws s3 cp s3://spdb-github-ci/db_fuzzer.log $GITHUB_WORKSPACE/out/db_fuzzer.log || echo "db_fuzzer.log not found"
          ls -alFh $GITHUB_WORKSPACE/out
          
      - name: download db_map_fuzzer.log from s3
        run: |
          mkdir -p $GITHUB_WORKSPACE/out
          aws s3 cp s3://spdb-github-ci/db_map_fuzzer.log $GITHUB_WORKSPACE/out/db_map_fuzzer.log || echo "db_map_fuzzer.log not found"
          ls -alFh $GITHUB_WORKSPACE/out
      
      - name: fuzzersum
        run: |
          echo "~~~~ db_map_fuzzer LOGS ~~~~~"
          tail -20 $GITHUB_WORKSPACE/out/db_map_fuzzer.log | grep "==AddressSanitizer. Thread limit (4194304 threads) exceeded\. Dying\." || echo "db_map_fuzzer failed!"
          echo "~~~~ db_fuzzer LOGS ~~~~~"
          tail -20 $GITHUB_WORKSPACE/out/db_fuzzer.log | grep "==AddressSanitizer. Thread limit (4194304 threads) exceeded\. Dying\." || echo "db_fuzzer failed!"
          
      - name: clear s3 bucket
        run: |
          aws s3 rm s3://spdb-github-ci/ --recursive --include "*"
